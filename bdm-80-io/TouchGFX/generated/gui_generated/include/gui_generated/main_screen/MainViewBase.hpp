/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/mixins/ClickListener.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void b0_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b1_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b2_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b3_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b4_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b5_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b6_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b8_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b9_callback()
    {
        // Override and implement this function in Main
    }

    virtual void ba_callback()
    {
        // Override and implement this function in Main
    }

    virtual void bb_callback()
    {
        // Override and implement this function in Main
    }

    virtual void bc_callback()
    {
        // Override and implement this function in Main
    }

    virtual void bd_callback()
    {
        // Override and implement this function in Main
    }

    virtual void be_callback()
    {
        // Override and implement this function in Main
    }

    virtual void bf_callback()
    {
        // Override and implement this function in Main
    }

    virtual void b7_callback()
    {
        // Override and implement this function in Main
    }

    virtual void ret_callback()
    {
        // Override and implement this function in Main
    }

    virtual void run_callback()
    {
        // Override and implement this function in Main
    }

    virtual void store_callback()
    {
        // Override and implement this function in Main
    }

    virtual void load_callback()
    {
        // Override and implement this function in Main
    }

    virtual void reset_callback()
    {
        // Override and implement this function in Main
    }

    virtual void adrs_callback()
    {
        // Override and implement this function in Main
    }

    virtual void read_incr_callback()
    {
        // Override and implement this function in Main
    }

    virtual void read_decr_callback()
    {
        // Override and implement this function in Main
    }

    virtual void write_incr_callback()
    {
        // Override and implement this function in Main
    }

    virtual void update()
    {
        // Override and implement this function in Main
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::ButtonWithLabel bf;
    touchgfx::ButtonWithLabel be;
    touchgfx::ButtonWithLabel bd;
    touchgfx::ButtonWithLabel bc;
    touchgfx::ButtonWithLabel bb;
    touchgfx::ButtonWithLabel ba;
    touchgfx::ButtonWithLabel b9;
    touchgfx::ButtonWithLabel b8;
    touchgfx::ButtonWithLabel b7;
    touchgfx::ButtonWithLabel b6;
    touchgfx::ButtonWithLabel b5;
    touchgfx::ButtonWithLabel b4;
    touchgfx::ButtonWithLabel b3;
    touchgfx::ButtonWithLabel b2;
    touchgfx::ButtonWithLabel b1;
    touchgfx::ClickListener< touchgfx::ButtonWithLabel > b0;
    touchgfx::ButtonWithLabel ret;
    touchgfx::ButtonWithLabel run;
    touchgfx::ButtonWithLabel store;
    touchgfx::ButtonWithLabel load;
    touchgfx::ButtonWithLabel reset;
    touchgfx::ButtonWithLabel adrs;
    touchgfx::ButtonWithLabel read_incr;
    touchgfx::ButtonWithLabel read_decr;
    touchgfx::ButtonWithLabel write_incr;
    touchgfx::Button setting;
    touchgfx::ToggleButton toggleButton1;
    touchgfx::TextArea step;

private:

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_UPDATE_INTERVAL = 3;
    uint32_t frameCountupdateInterval;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MAINVIEWBASE_HPP
